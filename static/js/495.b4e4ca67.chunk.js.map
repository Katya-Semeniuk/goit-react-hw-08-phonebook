{"version":3,"file":"static/js/495.b4e4ca67.chunk.js","mappings":"oMAIaA,EAAoB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,E,wCCAzBC,EAAc,WACzB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAoB,SAAAC,GACxB,MAAwBA,EAAEC,cAAlBR,EAAR,EAAQA,KAAMS,EAAd,EAAcA,MACd,OAAQT,GACN,IAAK,OACHC,EAAQQ,GACR,MACF,IAAK,SACHN,EAAUM,GACV,MAEF,QACE,MAAM,IAAIC,MAAJ,iCAAoCV,EAApC,sBAEX,EAYKW,EAAQ,WACZV,EAAQ,IACRE,EAAU,GACX,EAED,OACE,0BACE,kBAAMS,SAjBc,SAAAL,GACtBA,EAAEM,iBACF,IAAMC,EAAY,CAChBd,KAAAA,EACAE,OAAAA,GAEFE,GAASW,EAAAA,EAAAA,IAAWD,IACpBH,GACD,EASG,WACE,qCAEE,kBACEK,SAAUV,EACVG,MAAOT,EACPA,KAAK,OACLiB,KAAK,OACLC,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAIZ,uCAEE,kBACEJ,SAAUV,EACVG,MAAOP,EACPF,KAAK,SACLiB,KAAK,MACLC,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAGZ,mBAAQH,KAAK,SAAb,6BAIP,EClEYI,EAAe,WAC1B,IAAMjB,GAAWC,EAAAA,EAAAA,MACXT,GAAW0B,EAAAA,EAAAA,IAAY5B,GAC7B6B,QAAQC,IAAI,eAAgB5B,GAK5B,OACE,0CAEGA,IACC,wBACGA,EAAS6B,KAAI,gBAAGC,EAAH,EAAGA,GAAI1B,EAAP,EAAOA,KAAME,EAAb,EAAaA,OAAb,OACZ,2BACE,uBAAIF,KACJ,uBAAIE,KAEJ,mBAAQe,KAAK,SAASU,QAAS,kBAbnB,SAAAD,GACtBtB,GAASwB,EAAAA,EAAAA,IAAcF,GACxB,CAWgDG,CAAgBH,EAAtB,EAA/B,sBAJOA,EADG,QAcvB,E,SC9BYI,E,QAAOC,GAAAA,IAAH,oGCMJC,EAAe,WAC1B,IAAM5B,GAAWC,EAAAA,EAAAA,MACXT,GAAW0B,EAAAA,EAAAA,IAAY5B,GAK7B,OAJAuC,EAAAA,EAAAA,YAAU,WACR7B,GAAS8B,EAAAA,EAAAA,MACV,GAAE,CAAC9B,KAGF,UAAC0B,EAAD,YACE,yCACqB,IAApBlC,EAASuC,QACR,gEAEA,qCAAavC,EAASuC,OAAtB,gBAEF,SAACrC,EAAD,KACA,+CACCF,EAASuC,OAAS,IAAK,SAACd,EAAD,MAG7B,EC3Bc,SAASe,IACtB,OAAO,SAACJ,EAAD,GACR,C","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactsList/ContactsList.jsx","components/ContactPages/ContsctPages.styled.js","components/ContactPages/ContactPages.jsx","pages/Contact.jsx"],"sourcesContent":["export const selectLoading = state => state.contacts.loading;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectAllContacts = state => state.contacts.items;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n\n  const handleInputChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        throw new Error(`Field type with a name ${name} is not processed`);\n    }\n  };\n\n  const onAddNewContact = e => {\n    e.preventDefault();\n    const contactEl = {\n      name,\n      number,\n    };\n    dispatch(addContact(contactEl));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div>\n      <form onSubmit={onAddNewContact}>\n        <label>\n          Name\n          <input\n            onChange={handleInputChange}\n            value={name}\n            name=\"name\"\n            type=\"text\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n\n        <label>\n          Number\n          <input\n            onChange={handleInputChange}\n            value={number}\n            name=\"number\"\n            type=\"tel\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n        <button type=\"submit\">Add contact</button>\n      </form>\n    </div>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectAllContacts } from 'redux/contacts/selectors';\n\nexport const ContactsList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectAllContacts);\n  console.log('ContactsList', contacts);\n\n  const onDeleteContact = id => {\n    dispatch(deleteContact(id));\n  };\n  return (\n    <div>\n      ContactsList\n      {contacts && (\n        <ul>\n          {contacts.map(({ id, name, number }) => (\n            <li key={id}>\n              <p>{name}</p>\n              <p>{number}</p>\n\n              <button type=\"button\" onClick={() => onDeleteContact(id)}>\n                Delete\n              </button>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Grid = styled.div`\n  padding: 10px;\n  /* display: flex; */\n  /* justify-content: center; */\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectAllContacts } from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { useEffect } from 'react';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport { Grid } from './ContsctPages.styled';\n\nexport const ContactsPage = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectAllContacts);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Grid>\n      <title>Phonebook</title>\n      {contacts.length === 0 ? (\n        <div>Add New Contact to your Phonebook</div>\n      ) : (\n        <p>You have {contacts.length} contacts</p>\n      )}\n      <ContactForm />\n      <h2> Your ContactsList</h2>\n      {contacts.length > 0 && <ContactsList />}\n    </Grid>\n  );\n};\n","import { ContactsPage } from 'components/ContactPages/ContactPages';\nexport default function Contact() {\n  return <ContactsPage />;\n}\n"],"names":["selectAllContacts","state","contacts","items","ContactForm","useState","name","setName","number","setNumber","dispatch","useDispatch","handleInputChange","e","currentTarget","value","Error","reset","onSubmit","preventDefault","contactEl","addContact","onChange","type","pattern","title","required","ContactsList","useSelector","console","log","map","id","onClick","deleteContact","onDeleteContact","Grid","styled","ContactsPage","useEffect","fetchContacts","length","Contact"],"sourceRoot":""}